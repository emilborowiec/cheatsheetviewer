# Git Cheat Sheet



## Creating local repository

### Create repository
git init
git init <dir>

### Clone repository
git clone <sshuser>@<host>:<path/to/repository>
git clone https://<host>/<path/to/repository>



## Inspecting repository

### Show status
git status

### Show last commits
git log
git log -n 3  # limit 3
git log --author="name"
git log -- <path>
git log --oneline
git log --graph --oneline --decorate --all

### Show files changed in commit
git show <commit>
git show --pretty="" --name-only <commit>

### Show diff
git diff           # work vs stage
git diff --staged  # stage vs head
git diff HEAD      # work vs head
git diff -- <path> # specified file



## Configuration

### Set config property
git config <property> <value>
git config --global <property> <value>

### View config
git config --get <property>
git config --global --get <property>
git config --list --show-origin

### Open config in editor
git config --edit
git config --edit --global

### Common properties
user.name
user.email
core.autocrlf
core.editor



## Manage local branches

### Show branches
git branch
git branch -v # show last commit
git branch -a # local and remote

### Create new branch
git branch <branch>
git checkout -b <branch>  # create and switch

### Switch branch
git switch <branch>
git checkout <branch>

### Delete local branch
git branch -d <branch>



## Integrate branches

### Bring changes onto current branch
git merge <branch>

### Rebase current branch starting point
git rebase <branch>
git rebase -i <branch>  # interactive



## Working with remotes

### Show remotes
git remote     ## just names
git remote -v  ## with urls

### Change remote url
git remote set-url <remote> <url>

### Get changes from remotes
git fetch <remote>  ## update remote-tracking branches
git fetch           ## from origin
git pull <remote>   ## upate and merge with local
git pull --rebase <remote>  ## update and rebase local

### Delete branch on remote repo
git push <remote> -D <branch>

### Send local refs to remote repo
git push <remote> <branch>
git push <remote>  ## current branch
git push ## current branch to origin
git push --all  ## send branches and tags
git push --tags ## send just tags



## Committing changes

### Stage all new and changed files
git add .

### Commit
git commit -m "message"     ## only staged files
git commit -a -m "message"  ## tracked files



## Working with temporary stash

### Stash uncommitted changes
git stash
git stash -u  ## include untracked files
git stash save "message"

### Reapply stashed changes
git stash pop

### Show stash contents
git stash list

### Discard stashed changes
git stash clear
git stash drop <stash>  # ex. stash@{1}



## Undoing uncommitted changes

### Restore files in working tree
git restore <file>
git checkout HEAD -- <path>

### Unstage file
git restore --staged <path>
git reset -- <path>

### Commit-level reset modes
--mixed (default): resets staging, keeps working dir
--hard: resets staging, resets working dir
hard is useful for discarding changes
--soft: only moves moves branch head
soft is useful for squashing commits



## Undoing committed changes

### Revert last commit
git revert HEAD

### Revert specific commit
git revert <commit>

### Change last commit message
git commit --amend -m "new message"

### Squash commits
git rebase -i <after-this-commit>
replace 'pick' with 'squash'